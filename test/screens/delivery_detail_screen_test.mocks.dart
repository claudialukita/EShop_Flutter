// Mocks generated by Mockito 5.0.11 from annotations
// in moviedb/test/screens/movie_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:eshop_flutter/core/models/async_state.dart' as _i2;
import 'package:eshop_flutter/core/models/checkout.dart' as _i3;
import 'package:eshop_flutter/delivery_detail/view_model/commit_addres_view_model.dart'
as _i4;
import 'package:eshop_flutter/delivery_detail/view_model/select_address_view_model.dart'
as _i6;
import 'package:state_notifier/state_notifier.dart' as _i5;

class _FakeAsyncState<T> extends _i1.Fake implements _i2.AsyncState<T> {}

class MockCommitAddressViewModel extends _i1.Mock
    implements _i4.CommitAddressViewModel {
  MockCommitAddressViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i5.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
      as bool);
  @override
  _i6.Stream<_i2.AsyncState<_i3.AddressDetail>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<_i2.AsyncState<_i3.AddressDetail>>.empty())
      as _i6.Stream<_i2.AsyncState<_i3.AddressDetail>>);
  @override
  _i2.AsyncState<_i3.AddressDetail> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeAsyncState<_i3.AddressDetail>())
      as _i2.AsyncState<_i3.AddressDetail>);
  @override
  set state(_i2.AsyncState<_i3.AddressDetail>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncState<_i3.AddressDetail> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
          returnValue: _FakeAsyncState<_i3.AddressDetail>())
      as _i2.AsyncState<_i3.AddressDetail>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
      as bool);
  @override
  void loadData() => super.noSuchMethod(Invocation.method(#loadData, []),
      returnValueForMissingStub: null);
  @override
  _i5.RemoveListener addListener(
      _i5.Listener<_i2.AsyncState<_i3.AddressDetail>>? listener,
      {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i5.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

class MockSelectAddressViewModel extends _i1.Mock
    implements _i6.SelectAddressViewModel {
  MockSelectAddressViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i5.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
      as bool);
  @override
  _i6.Stream<int> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<int>.empty())
      as _i6.Stream<int>);
  @override
  int get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: (int)));
  @override
  set state(int? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  int get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
          returnValue: (int)));
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
      as bool);
  @override
  void loadData() => super.noSuchMethod(Invocation.method(#loadData, []),
      returnValueForMissingStub: null);
  @override
  _i5.RemoveListener addListener(
      _i5.Listener<int>? listener,
      {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i5.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}
